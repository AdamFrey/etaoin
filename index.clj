{:namespaces
 ({:doc
   "\nThe API below was written regarding to the source code\nof different Webdriver implementations. All of them partially differ\nfrom the official W3C specification.\n\nThe standard:\nhttps://www.w3.org/TR/webdriver/\n\nChrome:\nhttps://github.com/bayandin/chromedriver/blob/master/client/command_executor.py\nhttps://github.com/bayandin/chromedriver/blob/master/client/webelement.py\n\nFirefox (Geckodriver):\nhttps://github.com/mozilla/webdriver-rust/blob/master/src/httpapi.rs\n\nPhantom.js (Ghostdriver)\nhttps://github.com/detro/ghostdriver/blob/master/src/request_handlers/session_request_handler.js\nhttps://github.com/detro/ghostdriver/blob/master/src/request_handlers/webelement_request_handler.js\n",
   :name "etaoin.api",
   :wiki-url "etaoin.api-api.html",
   :source-url nil}
  {:doc nil,
   :name "etaoin.client",
   :wiki-url "etaoin.client-api.html",
   :source-url nil}
  {:doc "https://www.w3.org/TR/webdriver/#keyboard-actions",
   :name "etaoin.keys",
   :wiki-url "etaoin.keys-api.html",
   :source-url nil}
  {:doc nil,
   :name "etaoin.proc",
   :wiki-url "etaoin.proc-api.html",
   :source-url nil}),
 :vars
 ({:raw-source-url nil,
   :name "back",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 302,
   :var-type "function",
   :arglists ([driver]),
   :doc "Move backwards in a browser's history.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/back"}
  {:raw-source-url nil,
   :name "create-driver",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 1250,
   :var-type "function",
   :arglists ([type & [opt]]),
   :doc
   "Creates a new driver instance.\n\nReturns an atom that represents driver's state. Some functions, for\nexample creating or deleting a session may change its state.\n\nThe function does not start a process or open a window. It just\ncreates an atom without side effects.\n\nArguments:\n\n- `type` is a keyword determines what driver to use. The supported\nbrowsers are `:firefox`, `:chrome`, `:phantom` and `:safari`.\n\n- `opt` is a map with additional options for a driver. The supported\noptions are:\n\n-- `:host` is a string with either IP or hostname. Use it if the\nserver is run not locally but somethere in your network.\n\n-- `:port` is an integer value what HTTP port to use. It is taken\nfrom the `default-ports` global map if is not passed. If there is no\nport in that map, a random-generated port is used.\n\n-- `:locator` is a string determs what algorithm to use by default\nwhen finding elements on page. `default-locator` variable is used if\nnot passed.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/create-driver"}
  {:raw-source-url nil,
   :name "create-session",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 93,
   :var-type "function",
   :arglists ([driver]),
   :doc
   "Initiates a new session for a driver. Opens a browser window as a\nside-effect. All the further requests are made within specific\nsession. Some drivers may work with only one active session. Returns\na long string identifier.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/create-session"}
  {:raw-source-url nil,
   :name "defmethods",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 48,
   :var-type "macro",
   :arglists ([multifn dispatch-vals & fn-tail]),
   :doc
   "Declares multimethods in batch. For each dispatch value from\ndispatch-vals, creates a new method.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/defmethods"}
  {:raw-source-url nil,
   :name "dispatch-driver",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 63,
   :var-type "function",
   :arglists ([driver & _]),
   :doc
   "Returns the current driver's type. Used as dispatcher in\nmultimethods.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/dispatch-driver"}
  {:raw-source-url nil,
   :name "forward",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 316,
   :var-type "function",
   :arglists ([driver]),
   :doc "Move forwards in a browser's history.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/forward"}
  {:raw-source-url nil,
   :name "get-element-size",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 562,
   :var-type "function",
   :arglists ([driver q]),
   :doc
   "Returns an element size as a map with :width and :height keys.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/get-element-size"}
  {:raw-source-url nil,
   :name "get-status",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 84,
   :var-type "function",
   :arglists ([driver]),
   :doc
   "Returns the current Webdriver status info. The content depends on\nspecific driver.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/get-status"}
  {:raw-source-url nil,
   :name "get-title",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 335,
   :var-type "function",
   :arglists ([driver]),
   :doc "Returns the current window's title.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/get-title"}
  {:raw-source-url nil,
   :name "get-url",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 327,
   :var-type "function",
   :arglists ([driver]),
   :doc "Returns the current URL string.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/get-url"}
  {:raw-source-url nil,
   :name "get-window-handle",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 137,
   :var-type "multimethod",
   :arglists nil,
   :doc "Returns the current active window identifier as a string.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/get-window-handle"}
  {:raw-source-url nil,
   :name "get-window-handles",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 157,
   :var-type "multimethod",
   :arglists nil,
   :doc "Returns a vector of all window identifiers.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/get-window-handles"}
  {:raw-source-url nil,
   :name "go",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 289,
   :var-type "function",
   :arglists ([driver url]),
   :doc
   "Open the URL the current window.\n\nExample:\n\n(def ff (firefox))\n(go ff \"http://google.com\")",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/go"}
  {:raw-source-url nil,
   :name "q-expand",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 367,
   :var-type "function",
   :arglists ([driver q]),
   :doc
   "Expands a query expression into a pair of\n[locator, term] values to pass them into low-level HTTP API.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/q-expand"}
  {:raw-source-url nil,
   :name "q-xpath",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 347,
   :var-type "function",
   :arglists ([q]),
   :doc
   "Turns a map into an XPath clause.\n\n{:tag :div :id :content :class :test :index 2}\n//div[@id='content'][@class='test'][2]",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/q-xpath"}
  {:raw-source-url nil,
   :name "query",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 428,
   :var-type "function",
   :arglists ([driver q]),
   :doc
   "Finds an element on a page.\n\nA query might be:\n\n- a string, so the current browser's locator will be used. Examples:\n\n//div[@id='content'] for XPath,\ndiv.article for CSS selector\n\n- a keyword :active that means the current active element\n\n- a map with either :xpath or :css keys with a string term, e.g:\n{:xpath \"//div[@id='content']\"} or\n{:css \"div.article\"}\n\n- a map that will turn into an XPath expression:\n{:tag :div} => .//div\n{:id :container} => .//*[@id='container']\n{:tag :a :class :external :index 2} => .//a[@class='external'][2]\n\n- a vector of any clause mentioned above. In that case,\nevery next term is searched inside the previous one. Example:\n[{:id :footer} {:tag :a}] => finds the first hyperlink\ninside a div with id 'footer'.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/query"}
  {:raw-source-url nil,
   :name "random-port",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 55,
   :var-type "function",
   :arglists ([]),
   :doc "Returns a random port skiping the first 1024 ones.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/random-port"}
  {:raw-source-url nil,
   :name "refresh",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 309,
   :var-type "function",
   :arglists ([driver]),
   :doc "Reload the current window.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/refresh"}
  {:raw-source-url nil,
   :name "run-driver",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 1294,
   :var-type "function",
   :arglists ([driver & [opt]]),
   :doc
   "Runs a driver process locally.\n\nCreates a UNIX process with a Webdriver HTTP server. Host and port\nare taken from a `driver` argument. Updates a driver instance with\nnew fields with process information. Returns modified driver.\n\nArguments:\n\n- `driver` is an atom created with `create-driver` function.\n\n- `opt` is an optional map with the following possible parameters:\n\n-- `:path` a string path to a binary file to launch. `default-paths`\nglobal map is used for lookup when not passed.\n\n-- `:args` a vector of additional arguments passed when starting a\nprocess.\n\n-- `:env` a map with system ENV variables. Keys are turned to\nupper-case strings.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/run-driver"}
  {:raw-source-url nil,
   :name "switch-window",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 175,
   :var-type "function",
   :arglists ([driver handle]),
   :doc "Switches a browser to another window.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/switch-window"}
  {:raw-source-url nil,
   :name "wait",
   :file "src/etaoin/api.clj",
   :source-url nil,
   :line 1008,
   :var-type "function",
   :arglists ([driver sec] [sec]),
   :doc "Does nothing for N seconds.",
   :namespace "etaoin.api",
   :wiki-url "/etaoin.api-api.html#etaoin.api/wait"})}
